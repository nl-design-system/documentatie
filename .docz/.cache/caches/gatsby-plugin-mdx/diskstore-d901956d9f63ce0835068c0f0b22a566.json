{"expireTime":9007200897497632000,"key":"gatsby-plugin-mdx-entire-payload-4d36ec8152e286186be83003b5760ec1-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import DefaultLayout from \"/Users/bobby/Sites/github.com/nl-design-system/documentatie/node_modules/gatsby-theme-docz/src/base/Layout.js\"","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":138,"offset":139},"indent":[]}},{"type":"export","default":true,"value":"export default DefaultLayout","position":{"start":{"line":5,"column":1,"offset":141},"end":{"line":5,"column":29,"offset":169},"indent":[]}},{"type":"heading","depth":1,"children":[{"type":"text","value":"Naming in Figma","position":{"start":{"line":7,"column":3,"offset":173},"end":{"line":7,"column":18,"offset":188},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":171},"end":{"line":7,"column":18,"offset":188},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A good approach in any design file is to explicitly name objects directly after their creation. This helps adding meaning to design objects and eases handoff of a design file to another designer or a developer.","position":{"start":{"line":9,"column":1,"offset":190},"end":{"line":9,"column":211,"offset":400},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":190},"end":{"line":9,"column":211,"offset":400},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140958292-85ccee96-2add-4613-9daf-755b11bd433b.png","alt":"Unnamed nested frames and groups","position":{"start":{"line":11,"column":1,"offset":402},"end":{"line":11,"column":137,"offset":538},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":402},"end":{"line":11,"column":137,"offset":538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For instance, if you create a rectangle meant as background and border container for a text input it is good practice to name the rectangle ","position":{"start":{"line":14,"column":1,"offset":541},"end":{"line":14,"column":141,"offset":681},"indent":[]}},{"type":"inlineCode","value":"text-input-background","position":{"start":{"line":14,"column":141,"offset":681},"end":{"line":14,"column":164,"offset":704},"indent":[]}},{"type":"text","value":" or similar right after creating the rectangle.","position":{"start":{"line":14,"column":164,"offset":704},"end":{"line":14,"column":211,"offset":751},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":541},"end":{"line":14,"column":211,"offset":751},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Where possible, components, layers, frames, and design tokens borrow (semantic) names from HTML and SVG tags, CSS properties, ARIA roles or BEM naming.","position":{"start":{"line":16,"column":1,"offset":753},"end":{"line":16,"column":152,"offset":904},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":753},"end":{"line":16,"column":152,"offset":904},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Component variants","position":{"start":{"line":18,"column":4,"offset":909},"end":{"line":18,"column":22,"offset":927},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":906},"end":{"line":18,"column":22,"offset":927},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For convenience and ‘scanablity’ when working with component variants we suggest using lowercase for boolean values, such as on/off or true/false options and sentence case for interactive and feedback states.","position":{"start":{"line":20,"column":1,"offset":929},"end":{"line":20,"column":209,"offset":1137},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":929},"end":{"line":20,"column":209,"offset":1137},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using the same naming as used in the front-end again eases communication and handoff. For instance for a checkbox’ checked state we use 'checked' instead of 'active'.","position":{"start":{"line":22,"column":1,"offset":1139},"end":{"line":22,"column":167,"offset":1305},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1139},"end":{"line":22,"column":167,"offset":1305},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In Figma, variant properties can be sorted by dragging and dropping individual properties.","position":{"start":{"line":24,"column":1,"offset":1307},"end":{"line":24,"column":91,"offset":1397},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1307},"end":{"line":24,"column":91,"offset":1397},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140958477-85782e98-ca0f-451a-b85e-1015ca081046.png","alt":"Component variant panel in Figma","position":{"start":{"line":26,"column":1,"offset":1399},"end":{"line":26,"column":137,"offset":1535},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1399},"end":{"line":26,"column":137,"offset":1535},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"These references also help quickly setting up an interactive prototype.","position":{"start":{"line":28,"column":1,"offset":1537},"end":{"line":28,"column":72,"offset":1608},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1537},"end":{"line":28,"column":72,"offset":1608},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140958596-9c6db66c-299b-441f-9196-af916dbe9f37.png","alt":"Prototype settings in Figma reflect variant naming","position":{"start":{"line":30,"column":1,"offset":1610},"end":{"line":30,"column":155,"offset":1764},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1610},"end":{"line":30,"column":155,"offset":1764},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Synonyms","position":{"start":{"line":32,"column":4,"offset":1769},"end":{"line":32,"column":12,"offset":1777},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1766},"end":{"line":32,"column":12,"offset":1777},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Synonyms in the description field help searching for components in libraries.","position":{"start":{"line":34,"column":1,"offset":1779},"end":{"line":34,"column":78,"offset":1856},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1779},"end":{"line":34,"column":78,"offset":1856},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In below example searching on either select, dropdown, or menu all return the library’s select component.","position":{"start":{"line":36,"column":1,"offset":1858},"end":{"line":36,"column":106,"offset":1963},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1858},"end":{"line":36,"column":106,"offset":1963},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140958774-31867f4e-87c2-45ae-86bc-288f965b99c7.png","alt":"Synonyms for Select component","position":{"start":{"line":38,"column":1,"offset":1965},"end":{"line":38,"column":134,"offset":2098},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1965},"end":{"line":38,"column":134,"offset":2098},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Descriptions can be set on individual component variants as well.","position":{"start":{"line":40,"column":1,"offset":2100},"end":{"line":40,"column":66,"offset":2165},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2100},"end":{"line":40,"column":66,"offset":2165},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Avoid local components from being published to a library","position":{"start":{"line":42,"column":5,"offset":2171},"end":{"line":42,"column":61,"offset":2227},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2167},"end":{"line":42,"column":61,"offset":2227},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Prefixing a component with an underscore (","position":{"start":{"line":44,"column":1,"offset":2229},"end":{"line":44,"column":43,"offset":2271},"indent":[]}},{"type":"inlineCode","value":"_","position":{"start":{"line":44,"column":43,"offset":2271},"end":{"line":44,"column":46,"offset":2274},"indent":[]}},{"type":"text","value":") prevents it from being published to a shared library. This is especially useful to avoid atomic elements, in use by  components but with no use as a reusable standalone element, from being added to a shared library.","position":{"start":{"line":44,"column":46,"offset":2274},"end":{"line":44,"column":263,"offset":2491},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2229},"end":{"line":44,"column":263,"offset":2491},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In below example searching on ‘checkbox’ returns all components with checkbox in their name. However searching on ‘placeholder’ returns no results.","position":{"start":{"line":46,"column":1,"offset":2493},"end":{"line":46,"column":148,"offset":2640},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":2493},"end":{"line":46,"column":148,"offset":2640},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140958964-90e3ddf8-5bd2-4f0b-bcdc-3b32be0958fe.png","alt":"Components which will be published, and components with a prefix not being published","position":{"start":{"line":48,"column":1,"offset":2642},"end":{"line":48,"column":189,"offset":2830},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":2642},"end":{"line":48,"column":189,"offset":2830},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Images","position":{"start":{"line":50,"column":4,"offset":2835},"end":{"line":50,"column":10,"offset":2841},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":2832},"end":{"line":50,"column":10,"offset":2841},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Design files are a perfect place to define the intention of images. If an image is decorative, and as such would get a blank ","position":{"start":{"line":52,"column":1,"offset":2843},"end":{"line":52,"column":126,"offset":2968},"indent":[]}},{"type":"inlineCode","value":"alt=\"\"","position":{"start":{"line":52,"column":126,"offset":2968},"end":{"line":52,"column":134,"offset":2976},"indent":[]}},{"type":"text","value":" alternative text attribute this can be added to its description.","position":{"start":{"line":52,"column":134,"offset":2976},"end":{"line":52,"column":199,"offset":3041},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":2843},"end":{"line":52,"column":199,"offset":3041},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Likewise, if an image is informative to the user, an appropriate ","position":{"start":{"line":54,"column":1,"offset":3043},"end":{"line":54,"column":66,"offset":3108},"indent":[]}},{"type":"inlineCode","value":"alt","position":{"start":{"line":54,"column":66,"offset":3108},"end":{"line":54,"column":71,"offset":3113},"indent":[]}},{"type":"text","value":" text can already be added as image name. Using the layer to add this image description results in this text being available in Figma’s Layer and Inspect panels.","position":{"start":{"line":54,"column":71,"offset":3113},"end":{"line":54,"column":232,"offset":3274},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":3043},"end":{"line":54,"column":232,"offset":3274},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140959070-29703f9f-6b66-4fe8-947d-52905dc84458.png","alt":"Image with undescriptive name","position":{"start":{"line":56,"column":1,"offset":3276},"end":{"line":56,"column":134,"offset":3409},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":3276},"end":{"line":56,"column":134,"offset":3409},"indent":[]}},{"type":"paragraph","children":[{"type":"image","title":null,"url":"https://user-images.githubusercontent.com/248921/140959094-c7b3b87e-f49a-4f23-8893-7e93080f94a9.png","alt":"Image with descriptive name","position":{"start":{"line":58,"column":1,"offset":3411},"end":{"line":58,"column":132,"offset":3542},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":3411},"end":{"line":58,"column":132,"offset":3542},"indent":[]}},{"type":"export","value":"export const _frontmatter = {}","position":{"start":{"line":61,"column":1,"offset":3545},"end":{"line":61,"column":31,"offset":3575},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":61,"column":31,"offset":3575}}},"scopeImports":[],"scopeIdentifiers":[],"rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/Users/bobby/Sites/github.com/nl-design-system/documentatie/node_modules/gatsby-theme-docz/src/base/Layout.js\"\nexport const _frontmatter = {};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"naming-in-figma\"\n    }}>{`Naming in Figma`}</h1>\n    <p>{`A good approach in any design file is to explicitly name objects directly after their creation. This helps adding meaning to design objects and eases handoff of a design file to another designer or a developer.`}</p>\n    <p><img alt=\"Unnamed nested frames and groups\" src=\"https://user-images.githubusercontent.com/248921/140958292-85ccee96-2add-4613-9daf-755b11bd433b.png\" /></p>\n    <p>{`For instance, if you create a rectangle meant as background and border container for a text input it is good practice to name the rectangle `}<inlineCode parentName=\"p\">{`text-input-background`}</inlineCode>{` or similar right after creating the rectangle.`}</p>\n    <p>{`Where possible, components, layers, frames, and design tokens borrow (semantic) names from HTML and SVG tags, CSS properties, ARIA roles or BEM naming.`}</p>\n    <h2 {...{\n      \"id\": \"component-variants\"\n    }}>{`Component variants`}</h2>\n    <p>{`For convenience and ‘scanablity’ when working with component variants we suggest using lowercase for boolean values, such as on/off or true/false options and sentence case for interactive and feedback states.`}</p>\n    <p>{`Using the same naming as used in the front-end again eases communication and handoff. For instance for a checkbox’ checked state we use 'checked' instead of 'active'.`}</p>\n    <p>{`In Figma, variant properties can be sorted by dragging and dropping individual properties.`}</p>\n    <p><img alt=\"Component variant panel in Figma\" src=\"https://user-images.githubusercontent.com/248921/140958477-85782e98-ca0f-451a-b85e-1015ca081046.png\" /></p>\n    <p>{`These references also help quickly setting up an interactive prototype.`}</p>\n    <p><img alt=\"Prototype settings in Figma reflect variant naming\" src=\"https://user-images.githubusercontent.com/248921/140958596-9c6db66c-299b-441f-9196-af916dbe9f37.png\" /></p>\n    <h2 {...{\n      \"id\": \"synonyms\"\n    }}>{`Synonyms`}</h2>\n    <p>{`Synonyms in the description field help searching for components in libraries.`}</p>\n    <p>{`In below example searching on either select, dropdown, or menu all return the library’s select component.`}</p>\n    <p><img alt=\"Synonyms for Select component\" src=\"https://user-images.githubusercontent.com/248921/140958774-31867f4e-87c2-45ae-86bc-288f965b99c7.png\" /></p>\n    <p>{`Descriptions can be set on individual component variants as well.`}</p>\n    <h3 {...{\n      \"id\": \"avoid-local-components-from-being-published-to-a-library\"\n    }}>{`Avoid local components from being published to a library`}</h3>\n    <p>{`Prefixing a component with an underscore (`}<inlineCode parentName=\"p\">{`_`}</inlineCode>{`) prevents it from being published to a shared library. This is especially useful to avoid atomic elements, in use by  components but with no use as a reusable standalone element, from being added to a shared library.`}</p>\n    <p>{`In below example searching on ‘checkbox’ returns all components with checkbox in their name. However searching on ‘placeholder’ returns no results.`}</p>\n    <p><img alt=\"Components which will be published, and components with a prefix not being published\" src=\"https://user-images.githubusercontent.com/248921/140958964-90e3ddf8-5bd2-4f0b-bcdc-3b32be0958fe.png\" /></p>\n    <h2 {...{\n      \"id\": \"images\"\n    }}>{`Images`}</h2>\n    <p>{`Design files are a perfect place to define the intention of images. If an image is decorative, and as such would get a blank `}<inlineCode parentName=\"p\">{`alt=\"\"`}</inlineCode>{` alternative text attribute this can be added to its description.`}</p>\n    <p>{`Likewise, if an image is informative to the user, an appropriate `}<inlineCode parentName=\"p\">{`alt`}</inlineCode>{` text can already be added as image name. Using the layer to add this image description results in this text being available in Figma’s Layer and Inspect panels.`}</p>\n    <p><img alt=\"Image with undescriptive name\" src=\"https://user-images.githubusercontent.com/248921/140959070-29703f9f-6b66-4fe8-947d-52905dc84458.png\" /></p>\n    <p><img alt=\"Image with descriptive name\" src=\"https://user-images.githubusercontent.com/248921/140959094-c7b3b87e-f49a-4f23-8893-7e93080f94a9.png\" /></p>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}