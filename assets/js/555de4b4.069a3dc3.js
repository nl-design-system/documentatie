'use strict';
(self.webpackChunk_nl_design_system_website = self.webpackChunk_nl_design_system_website || []).push([
 [22281],
 {
  23715: (e, n, i) => {
   i.r(n), i.d(n, { assets: () => t, contentTitle: () => a, default: () => h, frontMatter: () => o, metadata: () => d, toc: () => l });
   var s = i(52676),
    r = i(87118);
   const o = { title: 'Herbruikbare CSS schrijven \xb7 Developer \xb7 Handboek', hide_title: !0, hide_table_of_contents: !1, sidebar_label: 'Herbruikbare CSS schrijven', pagination_label: 'Herbruikbare CSS schrijven', description: 'Als developer CSS schrijven aan NL Design System', keywords: ['developer', 'CSS', 'componenten'] },
    a = 'Herbruikbare CSS schrijven voor NL Design System',
    d = { id: 'handboek/developer/herbruikbare-css', title: 'Herbruikbare CSS schrijven \xb7 Developer \xb7 Handboek', description: 'Als developer CSS schrijven aan NL Design System', source: '@site/docs/handboek/developer/10-herbruikbare-css.md', sourceDirName: 'handboek/developer', slug: '/handboek/developer/herbruikbare-css', permalink: '/handboek/developer/herbruikbare-css', draft: !1, unlisted: !1, editUrl: 'https://github.com/nl-design-system/documentatie/tree/main/docs/handboek/developer/10-herbruikbare-css.md', tags: [], version: 'current', sidebarPosition: 10, frontMatter: { title: 'Herbruikbare CSS schrijven \xb7 Developer \xb7 Handboek', hide_title: !0, hide_table_of_contents: !1, sidebar_label: 'Herbruikbare CSS schrijven', pagination_label: 'Herbruikbare CSS schrijven', description: 'Als developer CSS schrijven aan NL Design System', keywords: ['developer', 'CSS', 'componenten'] }, sidebar: 'handboek', previous: { title: 'Meewerken', permalink: '/handboek/developer/meewerken-als-developer' }, next: { title: 'Design Token conventie', permalink: '/handboek/developer/design-token-conventie' } },
    t = {},
    l = [
     { value: 'Schrijf CSS die ook werkt voor anderen', id: 'schrijf-css-die-ook-werkt-voor-anderen', level: 2 },
     { value: 'Schrijf CSS die niet de stylesheet van anderen in de weg zit', id: 'schrijf-css-die-niet-de-stylesheet-van-anderen-in-de-weg-zit', level: 2 },
     { value: 'Schrijf CSS die niet afhankelijk is van een <code>reset.css</code>', id: 'schrijf-css-die-niet-afhankelijk-is-van-een-resetcss', level: 2 },
     { value: 'Reset in een SCSS mixin', id: 'reset-in-een-scss-mixin', level: 3 },
     { value: 'Schrijf SCSS mixins voor gebruik met andere een CSS selector', id: 'schrijf-scss-mixins-voor-gebruik-met-andere-een-css-selector', level: 2 },
     { value: 'Schrijf CSS een class name die anderen niet gaan gebruiken', id: 'schrijf-css-een-class-name-die-anderen-niet-gaan-gebruiken', level: 2 },
     { value: 'Hulp nodig of gewoon even kennis maken?', id: 'hulp-nodig-of-gewoon-even-kennis-maken', level: 2 },
    ];
   function c(e) {
    const n = { a: 'a', code: 'code', em: 'em', h1: 'h1', h2: 'h2', h3: 'h3', p: 'p', pre: 'pre', ...(0, r.a)(), ...e.components };
    return (0, s.jsxs)(s.Fragment, { children: [(0, s.jsx)(n.h1, { id: 'herbruikbare-css-schrijven-voor-nl-design-system', children: 'Herbruikbare CSS schrijven voor NL Design System' }), '\n', (0, s.jsx)(n.p, { children: 'We hebben tips om herbruikbare CSS te schrijven, voor iedereen die werkt aan projecten in de NL Design System community. Wanneer je een nieuw component gaat ontwikkelen, omdat je iets nodig hebt dat nog niet bestaat in de community, dan kun je herbruikbare CSS schrijven zodat anderen ook je nieuwe component kunnen gebruiken.' }), '\n', (0, s.jsxs)(n.p, { children: ['Als je werkt aan software die door verschillende overheidsorganisaties wordt ingezet, dan is het belangrijk dat bezoekers de website of app vertrouwen doordat het dezelfde huisstijl heeft als ze gewend zijn. Dit geldt bijvoorbeeld voor makers van een CMS voor meerdere gemeenten, of voor ', (0, s.jsx)(n.a, { href: 'http://commonground.nl', children: 'Common Ground' }), ' software. Als jouw CSS instelbaar is met design tokens, dan is het veel minder werk om de huisstijl goed te gebruiken en hebben de gebruikers al gelijk meer vertrouwen in de dienst.'] }), '\n', (0, s.jsx)(n.h2, { id: 'schrijf-css-die-ook-werkt-voor-anderen', children: 'Schrijf CSS die ook werkt voor anderen' }), '\n', (0, s.jsxs)(n.p, { children: ['Vermijd code voor je huisstijl in herbruikbare CSS. Gebruik CSS variabelen voor ', (0, s.jsx)(n.em, { children: 'component design tokens' }), ' die ingevuld kunnen worden met de huisstijl van anderen. Dit is belangrijk als jouw componenten door anderen gebruikt worden, of als je aan software bouwt die door verschillende organisaties wordt ge\xefnstalleerd met hun eigen huisstijl.'] }), '\n', (0, s.jsxs)(n.p, { children: ['Bijvoorbeeld zo niet, met ', (0, s.jsx)(n.em, { children: 'brand design tokens' }), ' in je component:'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '.example-button {\n  background-color: var(--example-blue);\n}\n' }) }), '\n', (0, s.jsxs)(n.p, { children: ['Maar wel zo, met ', (0, s.jsx)(n.em, { children: 'component design tokens' }), ' voor je component:'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '.example-button {\n  background-color: var(--example-button-background-color);\n}\n' }) }), '\n', (0, s.jsxs)(n.p, { children: ['De code voor je eigen huisstijl gebruik je dan als losse theme. In je thema zal de ', (0, s.jsx)(n.em, { children: 'component design token' }), ' verwijzen naar de ', (0, s.jsx)(n.em, { children: 'brand design token' }), '.'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '.example-theme {\n  --example-blue: navy;\n  --example-button-background-color: var(--example-blue);\n}\n' }) }), '\n', (0, s.jsxs)(n.p, { children: ["Zo'n CSS-bestand met de theme kun je automatisch laten maken, door een ", (0, s.jsx)(n.a, { href: 'https://design-tokens.github.io/community-group/format/', children: 'Design Tokens JSON bestand' }), ' met ', (0, s.jsx)(n.a, { href: 'https://amzn.github.io/style-dictionary/', children: 'Style Dictionary' }), ' te vertalen naar CSS. Elke huisstijl kan zijn eigen design token JSON bestand hebben, die gebruikt wordt in meerdere projecten.'] }), '\n', (0, s.jsx)(n.h2, { id: 'schrijf-css-die-niet-de-stylesheet-van-anderen-in-de-weg-zit', children: 'Schrijf CSS die niet de stylesheet van anderen in de weg zit' }), '\n', (0, s.jsx)(n.p, { children: 'Deel je CSS in een file die anderen kunnen importeren zonder dat het effect heeft op hun website. De pagina moet eerst een CSS class name gebruiken, voordat jouw CSS effect heeft. Op deze manier kunnen anderen zonder extra werk delen van jouw CSS hergebruiken.' }), '\n', (0, s.jsxs)(n.p, { children: ['Bijvoorbeeld ', (0, s.jsx)(n.em, { children: 'niet' }), ' zo:'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: ':root {\n  --example-link-color: blue;\n}\n\na:link {\n  color: var(--example-link-color);\n}\n' }) }), '\n', (0, s.jsx)(n.p, { children: 'Maar zo:' }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '.example-theme {\n  --example-link-color: blue;\n}\n\n.example-link,\n.example-html-content a:link {\n  color: var(--example-link-color);\n}\n' }) }), '\n', (0, s.jsxs)(n.h2, { id: 'schrijf-css-die-niet-afhankelijk-is-van-een-resetcss', children: ['Schrijf CSS die niet afhankelijk is van een ', (0, s.jsx)(n.code, { children: 'reset.css' })] }), '\n', (0, s.jsxs)(n.p, { children: ['Als je een HTML element zoals ', (0, s.jsx)(n.code, { children: '<ul>' }), ' gebruikt om een navigatie-component te maken, dan wil je bijvoorbeeld geen last hebben van ', (0, s.jsx)(n.code, { children: 'padding-inline-start' }), ' uit de browser default stylesheet (zoals ', (0, s.jsx)(n.a, { href: 'https://hg.mozilla.org/mozilla-central/file/tip/layout/style/res/html.css', children: 'die van Firefox' }), ' of ', (0, s.jsx)(n.a, { href: 'https://trac.webkit.org/browser/trunk/Source/WebCore/css/html.css', children: 'van Safari' }), '). Gebruik dan expliciet in de component daarvoor CSS:'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: 'ul.example-nav {\n  padding-inline-start: 0;\n  /* \u2026other styles\u2026 */\n}\n' }) }), '\n', (0, s.jsxs)(n.p, { children: ['Als jouw project een ', (0, s.jsxs)(n.a, { href: 'https://meyerweb.com/eric/tools/css/reset/', children: [(0, s.jsx)(n.code, { children: 'reset.css' }), ' variant'] }), ' gebruikt dan heb jij die padding reset misschien niet nodig, maar gebruik dan toch wel die CSS zodat het ook werkt voor anderen zonder jouw ', (0, s.jsx)(n.code, { children: 'reset.css' }), '.'] }), '\n', (0, s.jsxs)(n.p, { children: ['Dus ', (0, s.jsx)(n.em, { children: 'niet' }), ' zo:'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '* {\n  padding: 0;\n}\n\nul.example-nav {\n  /* \u2026other styles\u2026 */\n}\n' }) }), '\n', (0, s.jsx)(n.h3, { id: 'reset-in-een-scss-mixin', children: 'Reset in een SCSS mixin' }), '\n', (0, s.jsxs)(n.p, { children: ['Als je in CSS ziet dat een property is ingesteld ', (0, s.jsx)(n.em, { children: 'initial value' }), ' van die property (zoals ', (0, s.jsx)(n.code, { children: '0' }), ' voor padding properties), dan kun je denken: die code kan gewoon weg. Als reset code in een los bestand staat met mixins, dan ontbreekt de context dat het bedoeld is om een bepaald HTML element te resetten.'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@mixin example-nav {\n  padding-inline-start: 0;\n  /* \u2026other styles\u2026 */\n}\n' }) }), '\n', (0, s.jsx)(n.p, { children: 'Je wilt dan duidelijk maken waarom de code er is, om te voorkomen dat iemand het later "opschoont". Je kunt bijvoorbeeld de code verplaatsen naar een mixin voor alleen de reset code:' }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@mixin reset-ul {\n  padding-inline-start: 0;\n  /* \u2026other styles\u2026 */\n}\n\n@mixin example-nav {\n  @include reset-ul;\n  /* \u2026other styles\u2026 */\n}\n' }) }), '\n', (0, s.jsx)(n.h2, { id: 'schrijf-scss-mixins-voor-gebruik-met-andere-een-css-selector', children: 'Schrijf SCSS mixins voor gebruik met andere een CSS selector' }), '\n', (0, s.jsxs)(n.p, { children: ['Als de onderdelen van je CSS deelt als ', (0, s.jsxs)(n.a, { href: 'https://sass-lang.com/documentation/at-rules/mixin', children: ['SCSS ', (0, s.jsx)(n.em, { children: 'mixin' })] }), ' dan kan jouw CSS ook werken voor projecten die een andere CSS selector gebruiken dan jij.'] }), '\n', (0, s.jsxs)(n.p, { children: ['Bijvoorbeeld ', (0, s.jsx)(n.code, { children: '_mixin.scss' }), ':'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@mixin example-link {\n  color: var(--example-link-color);\n}\n' }) }), '\n', (0, s.jsxs)(n.p, { children: ['Bijvoorbeeld ', (0, s.jsx)(n.code, { children: 'index.scss' }), ':'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@import "./mixin";\n\n.example-link {\n  @include example-link;\n}\n' }) }), '\n', (0, s.jsx)(n.p, { children: 'Een ander project moet de CSS misschien op alle links toepassen op de pagina, omdat ze geen invloed hebben op de HTML:' }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@import "@example/css-components/link";\n\na:link {\n  @include example-link;\n}\n' }) }), '\n', (0, s.jsx)(n.p, { children: 'Nog een ander project gebruikt de CSS voor een web component met Shadow DOM:' }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@import "@example/css-components/link";\n\n:host {\n  @include example-link;\n}\n' }) }), '\n', (0, s.jsxs)(n.p, { children: ['Nog een ander project gebruikt het tijdelijk tijdens een migratie voor oude CSS class names, totdat alle templates de nieuwe ', (0, s.jsx)(n.code, { children: 'example-link' }), ' class name gebruiken.'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-scss', children: '@import "@example/css-components/link";\n\n.old-link {\n  @include example-link;\n}\n' }) }), '\n', (0, s.jsx)(n.h2, { id: 'schrijf-css-een-class-name-die-anderen-niet-gaan-gebruiken', children: 'Schrijf CSS een class name die anderen niet gaan gebruiken' }), '\n', (0, s.jsxs)(n.p, { children: ['Begin namen in je code met een prefix voor jouw organisatie, zoals in BEM class names, CSS variabelen en Custom Elements. Wij gebruiken ', (0, s.jsx)(n.code, { children: 'nl-' }), ', jij kiest iets anders. Gebruik alleen letters en cijfers in de prefix, geen andere tekens zoals het koppelstreepje.'] }), '\n', (0, s.jsx)(n.p, { children: 'Heb je een variant nodig op een CSS component uit de community? Gebruik dan je eigen prefix voor de uitbreiding, niet de prefix van anderen. Je moet geen class name maken die de developers van de andere prefix in de toekomst misschien gaan gebruiken.' }), '\n', (0, s.jsxs)(n.p, { children: ['Bijvoorbeeld niet zo, als je een ', (0, s.jsx)(n.code, { children: 'small' }), ' variant van de ', (0, s.jsx)(n.code, { children: 'nl-button' }), ' nodig hebt:'] }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '.nl-button--small {\n  font-size: 16px;\n}\n' }) }), '\n', (0, s.jsx)(n.p, { children: 'Wanneer de developers later een nieuwe versie maken met dezelfde naam, dan zul je de code moeten aanpassen om veilig te updaten naar de laatste versie.' }), '\n', (0, s.jsx)(n.p, { children: 'Bijvoorbeeld wel zo:' }), '\n', (0, s.jsx)(n.pre, { children: (0, s.jsx)(n.code, { className: 'language-css', children: '.example-button--small {\n  font-size: 16px;\n}\n' }) }), '\n', (0, s.jsx)(n.h2, { id: 'hulp-nodig-of-gewoon-even-kennis-maken', children: 'Hulp nodig of gewoon even kennis maken?' }), '\n', (0, s.jsxs)(n.p, { children: ['Dat kan! Onze gegevens kun je vinden op de ', (0, s.jsx)(n.a, { href: '/project/kernteam', children: 'pagina over het kernteam' }), '.'] })] });
   }
   function h(e = {}) {
    const { wrapper: n } = { ...(0, r.a)(), ...e.components };
    return n ? (0, s.jsx)(n, { ...e, children: (0, s.jsx)(c, { ...e }) }) : c(e);
   }
  },
  87118: (e, n, i) => {
   i.d(n, { Z: () => d, a: () => a });
   var s = i(75271);
   const r = {},
    o = s.createContext(r);
   function a(e) {
    const n = s.useContext(o);
    return s.useMemo(
     function () {
      return 'function' == typeof e ? e(n) : { ...n, ...e };
     },
     [n, e],
    );
   }
   function d(e) {
    let n;
    return (n = e.disableParentContext ? ('function' == typeof e.components ? e.components(r) : e.components || r) : a(e.components)), s.createElement(o.Provider, { value: n }, e.children);
   }
  },
 },
]);
