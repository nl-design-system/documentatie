'use strict';
(self.webpackChunk_nl_design_system_website = self.webpackChunk_nl_design_system_website || []).push([
 [35719],
 {
  32257: (e, n, i) => {
   i.r(n), i.d(n, { assets: () => d, contentTitle: () => o, default: () => g, frontMatter: () => s, metadata: () => t, toc: () => l });
   var r = i(52676),
    a = i(40139);
   const s = { title: 'Design tokens versiebeheer', hide_title: !0, hide_table_of_contents: !0, sidebar_label: 'Design tokens versiebeheer', sidebar_position: 7, pagination_label: 'Design tokens versiebeheer', description: 'Informatie voor designers over semver en hoe we het toepassen op de packages met design tokens.', slug: '/handboek/designer/design-tokens-versiebeheer', keywords: ['design tokens', 'versiebeheer', 'changelog', 'semantic versioning', 'major', 'minor', 'patch'] },
    o = 'Design tokens versiebeheer',
    t = { id: 'handboek/designer/werken-met-nl-design-system/design-tokens-versiebeheer', title: 'Design tokens versiebeheer', description: 'Informatie voor designers over semver en hoe we het toepassen op de packages met design tokens.', source: '@site/docs/handboek/designer/werken-met-nl-design-system/design-tokens-versiebeheer.mdx', sourceDirName: 'handboek/designer/werken-met-nl-design-system', slug: '/handboek/designer/design-tokens-versiebeheer', permalink: '/handboek/designer/design-tokens-versiebeheer', draft: !1, unlisted: !1, editUrl: 'https://github.com/nl-design-system/documentatie/tree/main/docs/handboek/designer/werken-met-nl-design-system/design-tokens-versiebeheer.mdx', tags: [], version: 'current', sidebarPosition: 7, frontMatter: { title: 'Design tokens versiebeheer', hide_title: !0, hide_table_of_contents: !0, sidebar_label: 'Design tokens versiebeheer', sidebar_position: 7, pagination_label: 'Design tokens versiebeheer', description: 'Informatie voor designers over semver en hoe we het toepassen op de packages met design tokens.', slug: '/handboek/designer/design-tokens-versiebeheer', keywords: ['design tokens', 'versiebeheer', 'changelog', 'semantic versioning', 'major', 'minor', 'patch'] }, sidebar: 'handboek', previous: { title: 'Figma changelog', permalink: '/handboek/designer/figma-changelog' }, next: { title: 'Zelf een thema maken', permalink: '/handboek/designer/zelf-thema-maken' } },
    d = {},
    l = [
     { value: 'Semantic versioning in een notendop', id: 'semantic-versioning-in-een-notendop', level: 2 },
     { value: 'Major', id: 'major', level: 3 },
     { value: 'Minor', id: 'minor', level: 3 },
     { value: 'Patch', id: 'patch', level: 3 },
     { value: 'Waarom zijn versienummers belangrijk?', id: 'waarom-zijn-versienummers-belangrijk', level: 3 },
     { value: 'Hoe bepaal je het type van je verandering?', id: 'hoe-bepaal-je-het-type-van-je-verandering', level: 2 },
     { value: 'Breaking changes', id: 'breaking-changes', level: 3 },
     { value: 'Voorbeelden van breaking changes in design tokens', id: 'voorbeelden-van-breaking-changes-in-design-tokens', level: 4 },
     { value: 'Nieuwe features', id: 'nieuwe-features', level: 3 },
     { value: 'Bug fixes', id: 'bug-fixes', level: 3 },
     { value: 'Breaking changes uitstellen', id: 'breaking-changes-uitstellen', level: 2 },
     { value: 'Communiceer over je veranderingen', id: 'communiceer-over-je-veranderingen', level: 2 },
     { value: 'Situatie A: in het NL Design System &#39;themes&#39; repository', id: 'situatie-a-in-het-nl-design-system-themes-repository', level: 3 },
     { value: 'Situatie B: in je eigen repository', id: 'situatie-b-in-je-eigen-repository', level: 3 },
     { value: 'Hoe verder?', id: 'hoe-verder', level: 2 },
    ];
   function h(e) {
    const n = { a: 'a', code: 'code', h1: 'h1', h2: 'h2', h3: 'h3', h4: 'h4', li: 'li', ol: 'ol', p: 'p', pre: 'pre', strong: 'strong', ...(0, a.a)(), ...e.components };
    return (0, r.jsxs)(r.Fragment, { children: [(0, r.jsx)(n.h1, { id: 'design-tokens-versiebeheer', children: 'Design tokens versiebeheer' }), '\n', (0, r.jsx)(n.p, { children: 'Design tokens komen uiteindelijk terecht in een package. Een package is een pakketje van code dat gebruikt kan worden door ontwikkelaars. Denk daarbij aan CSS variabelen.' }), '\n', (0, r.jsx)(n.p, { children: 'Deze packages worden ge\xfcpload naar een package registry. Een package registry is een database van alle packages die ooit zijn ge\xfcpload.' }), '\n', (0, r.jsx)(n.p, { children: 'Alle packages in een registry hebben een versienummer. Als er een nieuwe versie van een package wordt ge\xfcpload, wordt het versienummer van dat package opgehoogd.' }), '\n', (0, r.jsx)(n.h2, { id: 'semantic-versioning-in-een-notendop', children: 'Semantic versioning in een notendop' }), '\n', (0, r.jsxs)(n.p, { children: ['Bij NL Design System maken we voor het ophogen van versienummers gebruik van \u2018semantic versioning\u2019, ook wel bekend als semver. Binnen semver bestaat een versienummer uit drie delen: ', (0, r.jsx)(n.code, { children: 'major.minor.patch' }), ' (bijvoorbeeld ', (0, r.jsx)(n.code, { children: '1.3.2' }), ').'] }), '\n', (0, r.jsx)(n.h3, { id: 'major', children: 'Major' }), '\n', (0, r.jsxs)(n.p, { children: ['Het ophogen van het major deel van het versienummer gebeurt als er veranderingen zijn doorgevoerd die ', (0, r.jsx)(n.strong, { children: 'niet' }), ' achterwaarts compatibel zijn. Deze veranderingen heten ook wel ', (0, r.jsx)(n.a, { href: '#breaking-changes', children: 'breaking changes' }), '. Bij het ophogen van het major deel van het versienummer springen het minor en patch deel beide terug naar 0.'] }), '\n', (0, r.jsx)(n.h3, { id: 'minor', children: 'Minor' }), '\n', (0, r.jsxs)(n.p, { children: ['Het ophogen van het minor deel van het versienummer gebeurt als er veranderingen zijn doorgevoerd die ', (0, r.jsx)(n.strong, { children: 'wel' }), ' achterwaarts compatibel zijn. Denk daarbij aan nieuwe features, of nog specifieker, nieuwe design tokens. Bij het ophogen van het minor deel van het versienummer blijft het major deel hetzelfde en springt alleen het patch deel terug naar 0.'] }), '\n', (0, r.jsx)(n.h3, { id: 'patch', children: 'Patch' }), '\n', (0, r.jsx)(n.p, { children: 'Het ophogen van het patch deel van het versienummer gebeurt in de regel als er bugs zijn opgelost. Deze veranderingen zijn altijd achterwaarts compatibel. Bij het ophogen van het patch deel van het versienummer blijven het major en minor deel hetzelfde.' }), '\n', (0, r.jsx)(n.h3, { id: 'waarom-zijn-versienummers-belangrijk', children: 'Waarom zijn versienummers belangrijk?' }), '\n', (0, r.jsx)(n.p, { children: 'Een versienummer alleen zegt niet zo veel. Door versienummers met elkaar te vergelijken, kunnen afnemers van een package zien wat de impact is van veranderingen op code die gebruik maakt van het package.' }), '\n', (0, r.jsx)(n.h2, { id: 'hoe-bepaal-je-het-type-van-je-verandering', children: 'Hoe bepaal je het type van je verandering?' }), '\n', (0, r.jsx)(n.h3, { id: 'breaking-changes', children: 'Breaking changes' }), '\n', (0, r.jsx)(n.p, { children: 'Breaking changes in design tokens zijn veranderingen die negatieve gevolgen kunnen hebben voor afnemers van je package. Dit zijn veranderingen die niet achterwaarts compatibel zijn, waardoor bestaande code niet meer werkt zoals voorheen.' }), '\n', (0, r.jsx)(n.p, { children: 'Er gaat op de een of andere manier iets kapot. Soms is dit heel duidelijk, bijvoorbeeld spacing die helemaal is verdwenen. Soms is het subtieler en misschien niet meteen zichtbaar.' }), '\n', (0, r.jsxs)(n.p, { children: ['Breaking changes zijn zoals ', (0, r.jsx)(n.a, { href: '#major', children: 'hierboven uitgelegd' }), ', veranderingen die ervoor zorgen dat het ', (0, r.jsx)(n.strong, { children: 'major' }), ' deel van het versienummer opgehoogd moet worden.'] }), '\n', (0, r.jsx)(n.h4, { id: 'voorbeelden-van-breaking-changes-in-design-tokens', children: 'Voorbeelden van breaking changes in design tokens' }), '\n', (0, r.jsx)(n.p, { children: 'De eenvoudigste soort breaking change van een design token ontstaat als je een design token verwijdert. Afnemers die dit verwijderde design token in hun code gebruiken zien bij het gebruik van een nieuwe versie dat hun code niet meer werkt zoals voorheen.' }), '\n', (0, r.jsxs)(n.p, { children: [(0, r.jsx)(n.strong, { children: 'Voorbeeld 1' }), ': Het verwijderen van de design token ', (0, r.jsx)(n.code, { children: 'example.button.icon.space' }), ' zou ervoor zorgen dat de ruimte tussen het icoon en de tekst van een knop komt te vervallen. De knop gaat door deze verandering kapot.'] }), '\n', (0, r.jsx)(n.p, { children: 'Een ander soort breaking change die hier op lijkt is als je de naam van een design token verandert. Dit lijkt misschien een minder grote verandering dan het verwijderen van een design token maar in feite komt het neer op:' }), '\n', (0, r.jsxs)(n.ol, { children: ['\n', (0, r.jsx)(n.li, { children: 'Het verwijderen van een design token.' }), '\n', (0, r.jsx)(n.li, { children: 'Het toevoegen van een nieuwe design token.' }), '\n'] }), '\n', (0, r.jsxs)(n.p, { children: [(0, r.jsx)(n.strong, { children: 'Voorbeeld 2' }), ': Het hernoemen van de design token ', (0, r.jsx)(n.code, { children: 'example.button.icon.space' }), ' naar ', (0, r.jsx)(n.code, { children: 'example.button.column-gap' }), ' zorgt ervoor dat de design token ', (0, r.jsx)(n.code, { children: 'example.button.icon.space' }), ' niet meer bestaat. Net als in het eerste voorbeeld kan dit ervoor zorgen dat de knop niet meer naar behoren functioneert voor afnemers die de verwijderde design token gebruiken.'] }), '\n', (0, r.jsxs)(n.p, { children: [(0, r.jsx)(n.strong, { children: 'Voorbeeld 3' }), ': Zelfs het aanpassen van slechts \xe9\xe9n karakter in de naam van een design token, bijvoorbeeld het corrigeren van een typfout ', (0, r.jsx)(n.code, { children: 'colour' }), ' naar ', (0, r.jsx)(n.code, { children: 'color' }), ', is een breaking change.'] }), '\n', (0, r.jsx)(n.p, { children: 'Breaking changes zijn, ondanks hun naam, niet per se problematisch. Het is echter van groot belang om hier duidelijk over te communiceren. Daarover meer informatie later.' }), '\n', (0, r.jsx)(n.h3, { id: 'nieuwe-features', children: 'Nieuwe features' }), '\n', (0, r.jsxs)(n.p, { children: ['Nieuwe features, zoals nieuwe design tokens of een nieuwe eigenschap \u2018dismissable\u2018, zijn veranderingen die ervoor zorgen dat het ', (0, r.jsx)(n.strong, { children: 'minor' }), ' deel van het versienummer moet worden opgehoogd.'] }), '\n', (0, r.jsxs)(n.p, { children: [(0, r.jsx)(n.strong, { children: 'Voorbeeld' }), ': Je maakt een nieuw design token ', (0, r.jsx)(n.code, { children: 'example.button.box-shadow' }), ' aan dat gebruikt kan worden een knop een drop shadow te geven.'] }), '\n', (0, r.jsx)(n.h3, { id: 'bug-fixes', children: 'Bug fixes' }), '\n', (0, r.jsx)(n.p, { children: 'In Tokens Studio kun je beschrijvingen aan design tokens toevoegen. Het corrigeren van een spelfout in de beschrijving van een design token heeft geen gevolgen voor de afnemers. Deze veranderingen lijken het meest op een bug fix, maar zullen in de praktijk waarschijnlijk weinig voorkomen.' }), '\n', (0, r.jsx)(n.h2, { id: 'breaking-changes-uitstellen', children: 'Breaking changes uitstellen' }), '\n', (0, r.jsx)(n.p, { children: 'Om te voorkomen dat een wijziging meteen een breaking change is kun je ervoor kiezen om een nieuwe design token naast een te verwijderen design token te laten bestaan. Hierbij wordt de te verwijderen design token eerst gemarkeerd als \u2018deprecated\u2019 (in het Nederlands \u2018achterhaald\u2019) en niet direct verwijderd.' }), '\n', (0, r.jsxs)(n.p, { children: [(0, r.jsx)(n.strong, { children: 'Voorbeeld' }), ': De naam van de design token ', (0, r.jsx)(n.code, { children: 'example.button.icon.space' }), ' moet veranderen in ', (0, r.jsx)(n.code, { children: 'example.button.column-gap' }), '.'] }), '\n', (0, r.jsxs)(n.ol, { children: ['\n', (0, r.jsxs)(n.li, { children: ['Maak eerst de nieuwe design token ', (0, r.jsx)(n.code, { children: 'example.button.column-gap' }), ' aan.'] }), '\n', (0, r.jsxs)(n.li, { children: ['Verander de waarde van de oude design token ', (0, r.jsx)(n.code, { children: 'example.button.icon.space' }), ' naar de naam van de nieuwe design token: ', (0, r.jsx)(n.code, { children: '{example.button.column-gap}' }), '.'] }), '\n', (0, r.jsxs)(n.li, { children: ['Markeer de oude design token ', (0, r.jsx)(n.code, { children: 'example.button.icon.space' }), ' als \u2018deprecated\u2019 door ', (0, r.jsx)(n.code, { children: '[deprecated]' }), ' aan de beschrijving van de token toe te voegen.'] }), '\n'] }), '\n', (0, r.jsx)(n.p, { children: 'Door de oude token niet te verwijderen maar te markeren als \u2018deprecated\u2019, informeer je afnemers dat ze deze design token niet meer moeten gebruiken. Ze weten ook dat ze op termijn bestaande code zullen moeten aanpassen. Hoe de code moet worden aangepast, geef je aan in een changelog. Meer daarover hieronder.' }), '\n', (0, r.jsx)(n.p, { children: 'Als een token wordt gemarkeerd als \u2018deprecated\u2019 maar nog niet wordt verwijderd, wordt dit beschouwd als een patch wijziging. Als een token wordt toegevoegd dat als vervanging gaat dienen, wordt dit beschouwd als een minor wijziging.' }), '\n', (0, r.jsx)(n.h2, { id: 'communiceer-over-je-veranderingen', children: 'Communiceer over je veranderingen' }), '\n', (0, r.jsx)(n.p, { children: 'Je weet zelf het best wat je veranderd hebt. De afnemer van de design tokens weet dit niet. Het is daarom wel zo netjes om afnemers te informeren over de veranderingen. We leggen uit hoe je dat precies kunt doen.' }), '\n', (0, r.jsxs)(n.p, { children: ['Wanneer je een ', (0, r.jsx)(n.a, { href: '/handboek/designer/stappenplan/#verstuur-aanpassingen-naar-github', children: 'pull request hebt aangemaakt' }), ', geef je met een extra commit aan wat je precies hebt veranderd. De beschrijving die je hierbij opgeeft, wordt opgenomen in de changelog van het package.'] }), '\n', (0, r.jsx)(n.h3, { id: 'situatie-a-in-het-nl-design-system-themes-repository', children: "Situatie A: in het NL Design System 'themes' repository" }), '\n', (0, r.jsx)(n.p, { children: "Werk je vanuit de NL Design System 'themes' repository? Volg dan onderstaande stappen." }), '\n', (0, r.jsxs)(n.p, { children: ['Ga naar de lijst met ', (0, r.jsx)(n.a, { href: 'https://github.com/nl-design-system/themes/pulls', children: 'pull requests' }), ' en zoek je eigen pull request op.'] }), '\n', (0, r.jsxs)(n.ol, { children: ['\n', (0, r.jsx)(n.li, { children: 'Klik bovenaan in de pagina op de lichtblauwe naam van de branch die je hebt opgegeven.' }), '\n', (0, r.jsxs)(n.li, { children: ['Navigeer op de volgende pagina naar de folder ', (0, r.jsx)(n.code, { children: '.changesets' }), '.'] }), '\n', (0, r.jsxs)(n.li, { children: ['Kopieer het sjabloon uit het ', (0, r.jsx)(n.code, { children: 'README.md' }), ' bestand op deze pagina naar je klembord.'] }), '\n', (0, r.jsx)(n.li, { children: 'Klik rechtsboven op \u2018Add a file\u2019 en kies voor \u2018Create new file\u2019.' }), '\n', (0, r.jsxs)(n.li, { children: ['Geef je bestand een willekeurige naam en de extensie ', (0, r.jsx)(n.code, { children: '.md' }), ', bijvoorbeeld ', (0, r.jsx)(n.code, { children: 'aap-noot-mies.md' }), '.'] }), '\n', (0, r.jsx)(n.li, { children: 'Plak het gekopieerde sjabloon in het veld met \u2018Enter file contents here\u2019 en pas de inhoud aan.' }), '\n', (0, r.jsxs)(n.li, { children: ['Gebruik de juiste naam voor het package, namelijk ', (0, r.jsx)(n.code, { children: '"@nl-design-system-unstable/{organisatie}-design-tokens"' }), '.'] }), '\n', (0, r.jsxs)(n.li, { children: ['Geef het type van je verandering(en) aan: ', (0, r.jsx)(n.code, { children: 'major' }), ', ', (0, r.jsx)(n.code, { children: 'minor' }), ', of ', (0, r.jsx)(n.code, { children: 'patch' }), '.'] }), '\n', (0, r.jsx)(n.li, { children: 'Geef een duidelijke beschrijving van je veranderingen.' }), '\n', (0, r.jsx)(n.li, { children: 'Klik rechtsboven op \u2018Commit changes\u2026\u2019.' }), '\n', (0, r.jsx)(n.li, { children: 'Geef een commit message op, bijvoorbeeld \u2018Changeset toegevoegd\u2019.' }), '\n', (0, r.jsxs)(n.li, { children: ['Kies onderaan voor \u2018Commit directly to the ', (0, r.jsx)(n.code, { children: '{naam-van-je-branch}' }), '\u2019 branch.'] }), '\n', (0, r.jsx)(n.li, { children: 'Klik op \u2018Commit changes\u2019. Als je een foutmelding krijgt dat het bestand al bestaat, kies dan een andere willekeurige naam.' }), '\n'] }), '\n', (0, r.jsx)(n.p, { children: 'Hieronder een voorbeeld van de inhoud van het bestand met de beschrijving van een verandering met breaking changes voor de \u2018voorbeeld\u2019 organisatie.' }), '\n', (0, r.jsx)(n.pre, { children: (0, r.jsx)(n.code, { className: 'language-markdown', children: '---\n"@nl-design-system-unstable/voorbeeld-design-tokens": major\n---\n\nDeprecated design token example.button.icon.spacing verwijderd\n' }) }), '\n', (0, r.jsx)(n.h3, { id: 'situatie-b-in-je-eigen-repository', children: 'Situatie B: in je eigen repository' }), '\n', (0, r.jsx)(n.p, { children: 'Werk je vanuit een eigen repository? Volg dan onderstaande stappen.' }), '\n', (0, r.jsx)(n.p, { children: 'Ga naar de lijst met pull requests en zoek je eigen pull request op.' }), '\n', (0, r.jsxs)(n.ol, { children: ['\n', (0, r.jsx)(n.li, { children: 'Klik boven in de pagina op de lichtblauwe naam van de branch die je hebt opgegeven.' }), '\n', (0, r.jsxs)(n.li, { children: ['Navigeer op de volgende pagina naar de folder ', (0, r.jsx)(n.code, { children: '.changesets' }), '.'] }), '\n', (0, r.jsxs)(n.li, { children: ['Kopieer het sjabloon uit het ', (0, r.jsx)(n.code, { children: 'README.md' }), ' bestand op deze pagina naar je klembord.'] }), '\n', (0, r.jsx)(n.li, { children: 'Klik rechtsboven op \u2018Add a file\u2019 en kies voor \u2018Create new file\u2019.' }), '\n', (0, r.jsxs)(n.li, { children: ['Geef je bestand een willekeurige naam en de extensie ', (0, r.jsx)(n.code, { children: '.md' }), ', bijvoorbeeld ', (0, r.jsx)(n.code, { children: 'aap-noot-mies.md' }), '.'] }), '\n', (0, r.jsx)(n.li, { children: 'Plak het gekopieerde sjabloon in het veld met \u2018Enter file contents here\u2019 en pas de inhoud aan.' }), '\n', (0, r.jsxs)(n.li, { children: ['Geef het type van je verandering(en) aan: ', (0, r.jsx)(n.code, { children: 'major' }), ', ', (0, r.jsx)(n.code, { children: 'minor' }), ', of ', (0, r.jsx)(n.code, { children: 'patch' }), '.'] }), '\n', (0, r.jsx)(n.li, { children: 'Geef een duidelijke beschrijving van je veranderingen.' }), '\n', (0, r.jsx)(n.li, { children: 'Klik rechtsboven op \u2018Commit changes\u2026\u2019.' }), '\n', (0, r.jsx)(n.li, { children: 'Geef een commit message op, bijvoorbeeld \u2018Changeset toegevoegd\u2019.' }), '\n', (0, r.jsxs)(n.li, { children: ['Kies onderaan voor \u2018Commit directly to the ', (0, r.jsx)(n.code, { children: '{naam-van-je-branch}' }), '\u2019 branch.'] }), '\n', (0, r.jsx)(n.li, { children: 'Klik op \u2018Commit changes\u2019. Als je een foutmelding krijgt dat het bestand al bestaat, kies dan een andere willekeurige naam.' }), '\n'] }), '\n', (0, r.jsx)(n.h2, { id: 'hoe-verder', children: 'Hoe verder?' }), '\n', (0, r.jsx)(n.p, { children: 'Ben je er klaar voor om je pull request te mergen, komen er geen wijzigingen meer aan?' }), '\n', (0, r.jsx)(n.p, { children: 'Voor de volgende stappen heb je een developer nodig.' }), '\n', (0, r.jsxs)(n.ol, { children: ['\n', (0, r.jsx)(n.li, { children: 'Vraag een developer om je pull request te reviewen.' }), '\n', (0, r.jsx)(n.li, { children: 'Is je pull request goedgekeurd? Dan mag je deze mergen met de optie \u2018Squash and merge\u2019.' }), '\n', (0, r.jsx)(n.li, { children: 'Na het mergen wordt automatisch een nieuwe pull request aangemaakt door een bot om de versie te publiceren.' }), '\n', (0, r.jsx)(n.li, { children: 'Bepaal of je deze publicatie-pull request direct wilt mergen of wilt wachten op meer wijzigingen.' }), '\n', (0, r.jsx)(n.li, { children: 'De publicatie-pull request wordt automatisch bijgewerkt zodra nieuwe wijzigingen naar main worden gemerged.' }), '\n', (0, r.jsx)(n.li, { children: 'Klaar om de publicatie-pull request te mergen? Vraag een developer om dit te doen.' }), '\n', (0, r.jsx)(n.li, { children: 'Zodra de publicatie-pull request is gemerged, worden de pakketten automatisch gepubliceerd op npm.' }), '\n'] })] });
   }
   function g(e = {}) {
    const { wrapper: n } = { ...(0, a.a)(), ...e.components };
    return n ? (0, r.jsx)(n, { ...e, children: (0, r.jsx)(h, { ...e }) }) : h(e);
   }
  },
  40139: (e, n, i) => {
   i.d(n, { Z: () => t, a: () => o });
   var r = i(75271);
   const a = {},
    s = r.createContext(a);
   function o(e) {
    const n = r.useContext(s);
    return r.useMemo(
     function () {
      return 'function' == typeof e ? e(n) : { ...n, ...e };
     },
     [n, e],
    );
   }
   function t(e) {
    let n;
    return (n = e.disableParentContext ? ('function' == typeof e.components ? e.components(a) : e.components || a) : o(e.components)), r.createElement(s.Provider, { value: n }, e.children);
   }
  },
 },
]);
